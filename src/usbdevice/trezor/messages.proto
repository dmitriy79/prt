syntax = "proto2";

/**
 * Messages for TREZOR communication


// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessage";

import "google/protobuf/descriptor.proto";


 * Options for specifying message direction and type of wire (normal/debug)

extend google.protobuf.EnumValueOptions {
    optional bool wire_in = 50002;              // message can be transmitted via wire from PC to TREZOR
    optional bool wire_out = 50003;             // message can be transmitted via wire from TREZOR to PC
    optional bool wire_debug_in = 50004;        // message can be transmitted via debug wire from PC to TREZOR
    optional bool wire_debug_out = 50005;       // message can be transmitted via debug wire from TREZOR to PC
    optional bool wire_tiny = 50006;            // message is handled by TREZOR when the USB stack is in tiny mode
    optional bool wire_bootloader = 50007;      // message is only handled by TREZOR Bootloader
    optional bool wire_no_fsm = 50008;          // message is not handled by TREZOR unless the USB stack is in tiny mode
}
*/

/**
 * Mapping between TREZOR wire identifier (uint) and a protobuf message
 */
enum MessageType {

    // Management
    MessageType_Initialize = 0;
    MessageType_Ping = 1;
    MessageType_Success = 2;
    MessageType_Failure = 3;
    MessageType_ChangePin = 4;
    MessageType_WipeDevice = 5;
    MessageType_GetEntropy = 9;
    MessageType_Entropy = 10;
    MessageType_LoadDevice = 13;
    MessageType_ResetDevice = 14;
    MessageType_Features = 17;
    MessageType_PinMatrixRequest = 18;
    MessageType_PinMatrixAck = 19;
    MessageType_Cancel = 20;
    MessageType_ClearSession = 24;
    MessageType_ApplySettings = 25;
    MessageType_ButtonRequest = 26;
    MessageType_ButtonAck = 27;
    MessageType_ApplyFlags = 28;
    MessageType_BackupDevice = 34;
    MessageType_EntropyRequest = 35;
    MessageType_EntropyAck = 36;
    MessageType_PassphraseRequest = 41;
    MessageType_PassphraseAck = 42;
    MessageType_PassphraseStateRequest = 77;
    MessageType_PassphraseStateAck = 78;
    MessageType_RecoveryDevice = 45;
    MessageType_WordRequest = 46;
    MessageType_WordAck = 47;
    MessageType_GetFeatures = 55;
    MessageType_SetU2FCounter = 63;

    // Bootloader
    MessageType_FirmwareErase = 6;
    MessageType_FirmwareUpload = 7;
    MessageType_FirmwareRequest = 8;
    MessageType_SelfTest = 32;

    // Bitcoin
    MessageType_GetPublicKey = 11;
    MessageType_PublicKey = 12;
    MessageType_SignTx = 15;
    MessageType_TxRequest = 21;
    MessageType_TxAck = 22;
    MessageType_GetAddress = 29;
    MessageType_Address = 30;
    MessageType_SignMessage = 38;
    MessageType_VerifyMessage = 39;
    MessageType_MessageSignature = 40;

    // Crypto
    MessageType_CipherKeyValue = 23;
    MessageType_CipheredKeyValue = 48;
    MessageType_SignIdentity = 53;
    MessageType_SignedIdentity = 54;
    MessageType_GetECDHSessionKey = 61;
    MessageType_ECDHSessionKey = 62;
    MessageType_CosiCommit = 71;
    MessageType_CosiCommitment = 72;
    MessageType_CosiSign = 73;
    MessageType_CosiSignature = 74;

    // Debug
    MessageType_DebugLinkDecision = 100;
    MessageType_DebugLinkGetState = 101;
    MessageType_DebugLinkState = 102;
    MessageType_DebugLinkStop = 103;
    MessageType_DebugLinkLog = 104;
    MessageType_DebugLinkMemoryRead = 110;
    MessageType_DebugLinkMemory = 111;
    MessageType_DebugLinkMemoryWrite = 112;
    MessageType_DebugLinkFlashErase = 113;

    // Ethereum
    MessageType_EthereumGetAddress = 56;
    MessageType_EthereumAddress = 57;
    MessageType_EthereumSignTx = 58;
    MessageType_EthereumTxRequest = 59;
    MessageType_EthereumTxAck = 60;
    MessageType_EthereumSignMessage = 64;
    MessageType_EthereumVerifyMessage = 65;
    MessageType_EthereumMessageSignature = 66;

    // NEM
    MessageType_NEMGetAddress = 67;
    MessageType_NEMAddress = 68;
    MessageType_NEMSignTx = 69;
    MessageType_NEMSignedTx = 70;
    MessageType_NEMDecryptMessage = 75;
    MessageType_NEMDecryptedMessage = 76;

    // Lisk
    MessageType_LiskGetAddress = 114;
    MessageType_LiskAddress = 115;
    MessageType_LiskSignTx = 116;
    MessageType_LiskSignedTx = 117;
    MessageType_LiskSignMessage = 118;
    MessageType_LiskMessageSignature = 119;
    MessageType_LiskVerifyMessage = 120;
    MessageType_LiskGetPublicKey = 121;
    MessageType_LiskPublicKey = 122;

    // Tezos
    MessageType_TezosGetAddress = 150;
    MessageType_TezosAddress = 151;
    MessageType_TezosSignTx = 152;
    MessageType_TezosSignedTx = 153;
    MessageType_TezosGetPublicKey = 154;
    MessageType_TezosPublicKey = 155;

    // Stellar
    MessageType_StellarGetPublicKey = 200;
    MessageType_StellarPublicKey = 201;
    MessageType_StellarSignTx = 202;
    MessageType_StellarTxOpRequest = 203;
    MessageType_StellarGetAddress = 207;
    MessageType_StellarAddress = 208;
    MessageType_StellarCreateAccountOp = 210;
    MessageType_StellarPaymentOp = 211;
    MessageType_StellarPathPaymentOp = 212;
    MessageType_StellarManageOfferOp = 213;
    MessageType_StellarCreatePassiveOfferOp = 214;
    MessageType_StellarSetOptionsOp = 215;
    MessageType_StellarChangeTrustOp = 216;
    MessageType_StellarAllowTrustOp = 217;
    MessageType_StellarAccountMergeOp = 218;
    // Omitted: inflation is not a supported operation, would be 219
    MessageType_StellarManageDataOp = 220;
    MessageType_StellarBumpSequenceOp = 221;
    MessageType_StellarSignedTx = 230;

    // Cardano
    MessageType_CardanoSignMessage = 300;
    MessageType_CardanoMessageSignature = 301;
    MessageType_CardanoVerifyMessage = 302;
    MessageType_CardanoSignTransaction = 303;
    MessageType_CardanoTxRequest = 304;
    MessageType_CardanoGetPublicKey = 305;
    MessageType_CardanoPublicKey = 306;
    MessageType_CardanoGetAddress = 307;
    MessageType_CardanoAddress = 308;
    MessageType_CardanoTxAck = 309;
    MessageType_CardanoSignedTransaction = 310;

    // Ripple
    MessageType_RippleGetAddress = 400;
    MessageType_RippleAddress = 401;
    MessageType_RippleSignTx = 402;
    MessageType_RippleSignedTx = 403;
}
